Real-Time Communication : (w/o refreshing)
1. Send the GET request every 5 seconds(like Fetch) -> Polling[not real-time,snappy X,need for asking]
2. Web Sockets -> Receive events async (the new data is provided from server itself).

frontend(single user) -> event -> backend(ws)
backend -> emit event -> frontend(all users)

webRTC : The Event is Video/Audio

30 images/sec -> sent in real-time via web sockets.

ws/http -> uses TCP -> not ideal as TCP retries every failure like instagram page refresh.
webRTC -> uses UDP -> Skips missed data like one frame / chops as re-asking takes time.

webRTC : p2p -> Browsers talk to each other 

Browser A to B and not via a Server like http or ws. -> but what about other server's url and port?

browser -> request -> STUN Server -> Ip/port -> browser -> other browsers for communication

B1 -> Stun -> B1 with data = b1d
B2 -> Stun -> B2 with data = b2d

b1d <-> web sockets server (signalling server) <-> b2d (initial handshake for exchange of ip/port)

now, b1d <--> b2d (data sharing) directly via p2p webRTC

Ice candidates -> Ip + Port + protocol (search for webRTC - Trickle Ice by google)

RTCPeerConnection -> obj in JS

const pc = new RTCPeerConnection()

pc.localDescription -> your ICE candidates 
pc.remoteDescription -> other's ICE candidates

after handshake => B1 localDescription = B2 remoteDescription and vice versa

SDP - research ? the current session's ICE candidates 

Tracks -> pc.addTrack() to send and pc.onTrack() to receive after  exchanging SDP's

chrome://webrtc-internals

same browser webRTC without signalling server: https://jsfiddle.net/rainzhao/3L9sfsvf/